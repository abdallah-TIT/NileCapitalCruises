// <auto-generated />
using System;
using NileCapitalCruises.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace NileCapitalCruises.Infrastructure.Data.Migrations
{
    [DbContext(typeof(NileCapitalCruisesWSDBContext))]
    [Migration("20240121144719_Change DiningType in DB")]
    partial class ChangeDiningTypeinDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("NileCapitalCruises.Core.ApiModels.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("NileCapitalCruises.Core.ApiModels.CompanyUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyUserName")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("CompanyUserUrl")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Photo")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("tbl_CruiseBooking_Companies_Users");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.Amenity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AmenitiesIcon")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("AmenitiesIconHeight")
                        .HasColumnType("int");

                    b.Property<int?>("AmenitiesIconWidth")
                        .HasColumnType("int");

                    b.Property<string>("AmenitiesNameSys")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("AmenitiesPosition")
                        .HasColumnType("int");

                    b.Property<bool?>("AmenitiesStatus")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("tbl_CruiseBooking_Amenities");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.AmenityContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AmenitiesId")
                        .HasColumnType("int");

                    b.Property<string>("AmenitiesName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool?>("ContentLangStatus")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("OriginalTableId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AmenitiesId");

                    b.HasIndex(new[] { "OriginalTableId" }, "IX_tbl_CruiseBooking_Amenities_Content_AmenityId");

                    b.HasIndex(new[] { "LanguageId" }, "IX_tbl_CruiseBooking_Amenities_Content_LangId");

                    b.ToTable("tbl_CruiseBooking_Amenities_Contents");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.AspstateTempApplication", b =>
                {
                    b.Property<int>("AppId")
                        .HasColumnType("int");

                    b.Property<string>("AppName")
                        .IsRequired()
                        .HasMaxLength(280)
                        .IsUnicode(false)
                        .HasColumnType("char(280)")
                        .IsFixedLength();

                    b.HasKey("AppId")
                        .HasName("PK__ASPState__8E2CF7F99C8E2398");

                    b.HasIndex(new[] { "AppName" }, "Index_AppName");

                    b.ToTable("ASPStateTempApplications", (string)null);
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.AspstateTempSession", b =>
                {
                    b.Property<string>("SessionId")
                        .HasMaxLength(88)
                        .HasColumnType("nvarchar(88)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime");

                    b.Property<int>("Flags")
                        .HasColumnType("int");

                    b.Property<int>("LockCookie")
                        .HasColumnType("int");

                    b.Property<DateTime>("LockDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("LockDateLocal")
                        .HasColumnType("datetime");

                    b.Property<bool>("Locked")
                        .HasColumnType("bit");

                    b.Property<byte[]>("SessionItemLong")
                        .HasColumnType("image");

                    b.Property<byte[]>("SessionItemShort")
                        .HasMaxLength(7000)
                        .HasColumnType("varbinary(7000)");

                    b.Property<int>("Timeout")
                        .HasColumnType("int");

                    b.HasKey("SessionId")
                        .HasName("PK__ASPState__C9F492909AA164B4");

                    b.HasIndex(new[] { "Expires" }, "Index_Expires");

                    b.ToTable("ASPStateTempSessions", (string)null);
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BrandBanner")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("BrandBannerHeight")
                        .HasColumnType("int");

                    b.Property<int?>("BrandBannerWidth")
                        .HasColumnType("int");

                    b.Property<string>("BrandNameSys")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("BrandPhoto")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("BrandPhotoHeight")
                        .HasColumnType("int");

                    b.Property<int?>("BrandPhotoWidth")
                        .HasColumnType("int");

                    b.Property<string>("BrandUrl")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("tbl_CruiseBooking_Brands");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.BrandContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BrandDetails")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("BrandIntro")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("BrandName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool?>("ContentLangStatus")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("MetatagTitleBrand")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MetatagTitleDescription")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("OriginalTableId")
                        .HasColumnType("int")
                        .HasColumnName("BrandId");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OriginalTableId" }, "IX_tbl_CruiseBooking_Brands_Content_BrandId");

                    b.HasIndex(new[] { "LanguageId" }, "IX_tbl_CruiseBooking_Brands_Content_LangId");

                    b.ToTable("tbl_CruiseBooking_Brands_Contents");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.Cabin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CabinBanner")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("CabinBannerHeight")
                        .HasColumnType("int");

                    b.Property<int?>("CabinBannerWidth")
                        .HasColumnType("int");

                    b.Property<string>("CabinMaxPax")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CabinMinPax")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CabinNameSys")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CabinPhoto")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("CabinPhotoHeight")
                        .HasColumnType("int");

                    b.Property<int?>("CabinPhotoWidth")
                        .HasColumnType("int");

                    b.Property<int?>("CabinPosition")
                        .HasColumnType("int");

                    b.Property<string>("CabinSize")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool?>("CabinStatus")
                        .HasColumnType("bit");

                    b.Property<int?>("CabinTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CabinUrl")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("CruiseId")
                        .HasColumnType("int");

                    b.Property<int?>("DeckId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsUpperDeckCabin")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CabinTypeId");

                    b.HasIndex("DeckId");

                    b.HasIndex(new[] { "CruiseId" }, "IX_tbl_CruiseBooking_Cabins_CruiseId");

                    b.ToTable("tbl_CruiseBooking_Cabins");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.CabinAmenity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AmenityId")
                        .HasColumnType("int");

                    b.Property<int?>("CabinId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AmenityId");

                    b.HasIndex("CabinId");

                    b.ToTable("tbl_CruiseBooking_Cabins_Amenities");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.CabinContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CabinDetails")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CabinIntro")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CabinName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool?>("ContentLangStatus")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("OriginalTableId")
                        .HasColumnType("int")
                        .HasColumnName("CabinId");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OriginalTableId" }, "IX_tbl_CruiseBooking_Cabins_Content_CabinId");

                    b.HasIndex(new[] { "LanguageId" }, "IX_tbl_CruiseBooking_Cabins_Content_LangId");

                    b.ToTable("tbl_CruiseBooking_Cabins_Contents");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.CabinPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CabinId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PhotoFile")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("PhotoHieght")
                        .HasColumnType("int");

                    b.Property<int?>("PhotoPosition")
                        .HasColumnType("int");

                    b.Property<bool?>("PhotoStatus")
                        .HasColumnType("bit");

                    b.Property<int?>("PhotoWidth")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CabinId" }, "IX_tbl_CruiseBooking_Cabins_Photos_CabinId");

                    b.ToTable("tbl_CruiseBooking_Cabins_Photos");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.CabinStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CabinStatusNameSys")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("tbl_Master_CabinStatuses");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.CabinStatusContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CabinStatusName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool?>("ContentLangStatus")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("OriginalTableId")
                        .HasColumnType("int")
                        .HasColumnName("CabinStatusId");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OriginalTableId" }, "IX_tbl_Master_CabinStatuses_Contents_CabinStatusId");

                    b.HasIndex(new[] { "LanguageId" }, "IX_tbl_Master_CabinStatuses_Contents_LanguageId");

                    b.ToTable("tbl_Master_CabinStatuses_Contents");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.CabinType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CabinCategoryTypeNameSys")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("tbl_Master_Cabins_Types");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.CabinTypeContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CabinTypeId")
                        .HasColumnType("int")
                        .HasColumnName("CabinTypeId1");

                    b.Property<string>("CabinTypeName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("OriginalTableId")
                        .HasColumnType("int")
                        .HasColumnName("CabinTypeId");

                    b.HasKey("Id");

                    b.HasIndex("CabinTypeId");

                    b.HasIndex(new[] { "OriginalTableId" }, "IX_tbl_Master_Cabins_Types_Contents_CabinTypeId");

                    b.HasIndex(new[] { "LanguageId" }, "IX_tbl_Master_Cabins_Types_Contents_LanguageId");

                    b.ToTable("tbl_Master_Cabins_Types_Contents");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.CabinTypeOperationDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("Allotment")
                        .HasColumnType("int");

                    b.Property<int>("CabinTypeId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OperationDateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CabinTypeId");

                    b.HasIndex("OperationDateId");

                    b.ToTable("tbl_CruiseBooking_CabinTypes_OperationDates");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.CabinTypePeriodTypeRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float?>("CabinPriceDouble")
                        .HasColumnType("real");

                    b.Property<float?>("CabinPriceSingle")
                        .HasColumnType("real");

                    b.Property<float?>("CabinPriceTriple")
                        .HasColumnType("real");

                    b.Property<int?>("CabinTypeId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPercentage")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPositiveSign")
                        .HasColumnType("bit");

                    b.Property<float?>("Percentage")
                        .HasColumnType("real");

                    b.Property<int?>("PeriodTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("RateId")
                        .HasColumnType("int");

                    b.Property<float?>("Value")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("CabinTypeId");

                    b.HasIndex("PeriodTypeId");

                    b.HasIndex("RateId");

                    b.ToTable("tbl_CruiseBooking_CabinTypes_PeriodTypes_Rates");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.CabinTypePeriodTypeStandardRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<float?>("CabinPrice")
                        .HasColumnType("real");

                    b.Property<int?>("CabinTypeId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("PeriodTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("StandardRateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CabinTypeId");

                    b.HasIndex("PeriodTypeId");

                    b.HasIndex("StandardRateId");

                    b.ToTable("tbl_CruiseBooking_CabinTypes_PeriodTypes_StandardRates");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CityBanner")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("CityBannerHeight")
                        .HasColumnType("int");

                    b.Property<int?>("CityBannerWidth")
                        .HasColumnType("int");

                    b.Property<string>("CityNameSys")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CityPhoto")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("CityPhotoHeight")
                        .HasColumnType("int");

                    b.Property<int?>("CityPhotoWidth")
                        .HasColumnType("int");

                    b.Property<bool?>("CityStatus")
                        .HasColumnType("bit");

                    b.Property<string>("CityUrl")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("tbl_CruiseBooking_Cities");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.CityContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CityName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool?>("ContentLangStatus")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("OriginalTableId")
                        .HasColumnType("int")
                        .HasColumnName("CityId");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OriginalTableId" }, "IX_tbl_CruiseBooking_Cities_Contents_CityId");

                    b.HasIndex(new[] { "LanguageId" }, "IX_tbl_CruiseBooking_Cities_Contents_LanguageId");

                    b.ToTable("tbl_CruiseBooking_Cities_Contents");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CompanyNameSys")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CompanyUrl")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ContactPersonEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactPersonPhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Logo")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("SubscriptionEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SubscriptionStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("tbl_CruiseBooking_Companies");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.CompanyContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CompanyAdress")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ContactPersonName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("ContentLangStatus")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("OriginalTableId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyId");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OriginalTableId" }, "IX_tbl_CruiseBooking_Companies_Content_CompanyId");

                    b.HasIndex(new[] { "LanguageId" }, "IX_tbl_CruiseBooking_Companies_Content_LanguageId");

                    b.ToTable("tbl_CruiseBooking_Companies_Contents");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.CompanyUserCruise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CompanyUserId")
                        .HasColumnType("int");

                    b.Property<int?>("CruiseId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompanyUserId");

                    b.HasIndex("CruiseId");

                    b.ToTable("tbl_CruiseBooking_CompanyUsers_Cruises");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CityBanner")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("CityBannerHeight")
                        .HasColumnType("int");

                    b.Property<int?>("CityBannerWidth")
                        .HasColumnType("int");

                    b.Property<string>("CityNameSys")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CityPhoto")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("CityPhotoHeight")
                        .HasColumnType("int");

                    b.Property<int?>("CityPhotoWidth")
                        .HasColumnType("int");

                    b.Property<bool?>("CityStatus")
                        .HasColumnType("bit");

                    b.Property<string>("CityUrl")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("tbl_CruiseBooking_Countries");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.CountryContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("ContentLangStatus")
                        .HasColumnType("bit");

                    b.Property<string>("CountryName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("OriginalTableId")
                        .HasColumnType("int")
                        .HasColumnName("CountryId");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OriginalTableId" }, "IX_tbl_CruiseBooking_Countries_Contents_CountryId");

                    b.HasIndex(new[] { "LanguageId" }, "IX_tbl_CruiseBooking_Countries_Contents_LanguageId");

                    b.ToTable("tbl_CruiseBooking_Countries_Contents");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.Cruise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int?>("CabinNumbers")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ContactFinanceName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ContactFininaceEmail")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ContactFininaceMobile")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ContactGmEmail")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ContactGmMobile")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ContactGmName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ContactMarketingEmail")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ContactMarketingMobile")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ContactMarketingName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ContactReservationEmail")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ContactReservationMobile")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ContactReservationName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ContactSalesEmail")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ContactSalesMobile")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ContactSalesName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CruiseBanner")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("CruiseBannerHeight")
                        .HasColumnType("int");

                    b.Property<int?>("CruiseBannerWidth")
                        .HasColumnType("int");

                    b.Property<int?>("CruiseCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CruiseCheckIn")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CruiseCheckout")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CruiseDeckPlan")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("CruiseDeckPlanHeight")
                        .HasColumnType("int");

                    b.Property<int?>("CruiseDeckPlanWidth")
                        .HasColumnType("int");

                    b.Property<string>("CruiseGeneralEmail")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CruiseHeight")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CruiseLength")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CruiseLogo")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("CruiseLogoHeight")
                        .HasColumnType("int");

                    b.Property<int?>("CruiseLogoWidth")
                        .HasColumnType("int");

                    b.Property<string>("CruiseNameSys")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CruiseOopeningYear")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CruisePhoto")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("CruisePhotoHeight")
                        .HasColumnType("int");

                    b.Property<int?>("CruisePhotoWidth")
                        .HasColumnType("int");

                    b.Property<int?>("CruisePosition")
                        .HasColumnType("int");

                    b.Property<string>("CruiseRenovationYear")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CruiseReservationEmail")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool?>("CruiseStatus")
                        .HasColumnType("bit");

                    b.Property<string>("CruiseUrl")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CruiseWidth")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("DeckNumbers")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("WsAgouda")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("WsBooking")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("WsBrandUrl")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("WsExpedia")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("WsFacebook")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("WsGoogle")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("WsInstgram")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("WsSnapChat")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("WsTikTok")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("WsTripAdvisor")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("WsX")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("WsYoutube")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("WslinkdIn")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CruiseCategoryId");

                    b.ToTable("tbl_CruiseBooking_Cruises");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.CruiseCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClassIcon")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CruiseCategoryNameSys")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CruiseCategoryUrl")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("tbl_CruiseBooking_Cruises_Categories");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.CruiseCategoryContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("ContentLangStatus")
                        .HasColumnType("bit");

                    b.Property<string>("CruiseCategoryName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("OriginalTableId")
                        .HasColumnType("int")
                        .HasColumnName("CruiseCategoryId");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OriginalTableId" }, "IX_tbl_CruiseBooking_Cruises_Categories_Content_CruiseId");

                    b.HasIndex(new[] { "LanguageId" }, "IX_tbl_CruiseBooking_Cruises_Categories_Content_LangId");

                    b.ToTable("tbl_CruiseBooking_Cruises_Categories_Contents");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.CruiseContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("ContentLangStatus")
                        .HasColumnType("bit");

                    b.Property<string>("CruiseAccommodation")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CruiseActivities")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CruiseDetails")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CruiseDining")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CruiseIntro")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CruiseName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CruiseNote")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CruiseOverview")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CruiseTechnicalSpecifications")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("OriginalTableId")
                        .HasColumnType("int")
                        .HasColumnName("CruiseId");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OriginalTableId" }, "IX_tbl_CruiseBooking_Cruises_Content_CruiseId");

                    b.HasIndex(new[] { "LanguageId" }, "IX_tbl_CruiseBooking_Cruises_Content_LangId");

                    b.ToTable("tbl_CruiseBooking_Cruises_Contents");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.CruiseFacility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CruiseId")
                        .HasColumnType("int");

                    b.Property<int?>("FacilitiyId")
                        .HasColumnType("int");

                    b.Property<int?>("FacilityId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CruiseId");

                    b.HasIndex("FacilityId");

                    b.ToTable("tbl_CruiseBooking_Cruises_Facilties");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.CruisePhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CruiseId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PhotoFile")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("PhotoHieght")
                        .HasColumnType("int");

                    b.Property<int?>("PhotoPosition")
                        .HasColumnType("int");

                    b.Property<bool?>("PhotoStatus")
                        .HasColumnType("bit");

                    b.Property<int?>("PhotoWidth")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CruiseId" }, "IX_tbl_CruiseBooking_Cruises_Photos_CruiseId");

                    b.ToTable("tbl_CruiseBooking_Cruises_Photos");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.Deck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CruiseId")
                        .HasColumnType("int");

                    b.Property<string>("DeckNameSys")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("DeckPhoto")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("DeckPhotoHeight")
                        .HasColumnType("int");

                    b.Property<int?>("DeckPhotoWidth")
                        .HasColumnType("int");

                    b.Property<int?>("DeckPosition")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CruiseId" }, "IX_tbl_CruiseBooking_Decks_CruiseId");

                    b.ToTable("tbl_CruiseBooking_Decks");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.DeckContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("ContentLangStatus")
                        .HasColumnType("bit");

                    b.Property<string>("DeckName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("OriginalTableId")
                        .HasColumnType("int")
                        .HasColumnName("DeckId");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OriginalTableId" }, "IX_tbl_CruiseBooking_Decks_Content_DeckId");

                    b.HasIndex(new[] { "LanguageId" }, "IX_tbl_CruiseBooking_Decks_Content_LangId");

                    b.ToTable("tbl_CruiseBooking_Decks_Contents");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.Destination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("DestinationMainBanner")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DestinationMainBannerCruises")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("DestinationMainBannerCruisesHeight")
                        .HasColumnType("int");

                    b.Property<int?>("DestinationMainBannerCruisesWidth")
                        .HasColumnType("int");

                    b.Property<string>("DestinationMainBannerExcursions")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("DestinationMainBannerExcursionsHeight")
                        .HasColumnType("int");

                    b.Property<int?>("DestinationMainBannerExcursionsWidth")
                        .HasColumnType("int");

                    b.Property<int?>("DestinationMainBannerHeight")
                        .HasColumnType("int");

                    b.Property<string>("DestinationMainBannerHotels")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("DestinationMainBannerHotelsHeight")
                        .HasColumnType("int");

                    b.Property<int?>("DestinationMainBannerHotelsWidth")
                        .HasColumnType("int");

                    b.Property<string>("DestinationMainBannerPackages")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("DestinationMainBannerPackagesHeight")
                        .HasColumnType("int");

                    b.Property<int?>("DestinationMainBannerPackagesWidth")
                        .HasColumnType("int");

                    b.Property<string>("DestinationMainBannerShore")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("DestinationMainBannerShoreHeight")
                        .HasColumnType("int");

                    b.Property<int?>("DestinationMainBannerShoreWidth")
                        .HasColumnType("int");

                    b.Property<string>("DestinationMainBannerTransfers")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("DestinationMainBannerTransfersHeight")
                        .HasColumnType("int");

                    b.Property<int?>("DestinationMainBannerTransfersWidth")
                        .HasColumnType("int");

                    b.Property<int?>("DestinationMainBannerWidth")
                        .HasColumnType("int");

                    b.Property<string>("DestinationMainPhoto")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DestinationMainPhotoCruises")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("DestinationMainPhotoCruisesHeight")
                        .HasColumnType("int");

                    b.Property<int?>("DestinationMainPhotoCruisesWidth")
                        .HasColumnType("int");

                    b.Property<string>("DestinationMainPhotoExcursions")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("DestinationMainPhotoExcursionsHeight")
                        .HasColumnType("int");

                    b.Property<int?>("DestinationMainPhotoExcursionsWidth")
                        .HasColumnType("int");

                    b.Property<int?>("DestinationMainPhotoHeight")
                        .HasColumnType("int");

                    b.Property<string>("DestinationMainPhotoHotels")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("DestinationMainPhotoHotelsHeight")
                        .HasColumnType("int");

                    b.Property<int?>("DestinationMainPhotoHotelsWidth")
                        .HasColumnType("int");

                    b.Property<string>("DestinationMainPhotoPackages")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("DestinationMainPhotoPackagesHeight")
                        .HasColumnType("int");

                    b.Property<int?>("DestinationMainPhotoPackagesWidth")
                        .HasColumnType("int");

                    b.Property<string>("DestinationMainPhotoShore")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("DestinationMainPhotoShoreHeight")
                        .HasColumnType("int");

                    b.Property<int?>("DestinationMainPhotoShoreWidth")
                        .HasColumnType("int");

                    b.Property<string>("DestinationMainPhotoTransfers")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("DestinationMainPhotoTransfersHeight")
                        .HasColumnType("int");

                    b.Property<int?>("DestinationMainPhotoTransfersWidth")
                        .HasColumnType("int");

                    b.Property<int?>("DestinationMainPhotoWidth")
                        .HasColumnType("int");

                    b.Property<string>("DestinationMainVideo")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DestinationNameSys")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool?>("DestinationStatus")
                        .HasColumnType("bit");

                    b.Property<string>("DestinationUrl")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool?>("IntroIsVideo")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsEmbarkationCruise")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsFetaure")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsMainMenu")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPort")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsTravelGuide")
                        .HasColumnType("bit");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("SejourCode")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("tbl_CruiseBooking_Destinations");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.DestinationContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DestinationDetails")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DestinationIntro")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DestinationMetatagDescription")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DestinationMetatagTitle")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DestinationName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("LangStatus")
                        .HasColumnType("bit");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("OriginalTableId")
                        .HasColumnType("int")
                        .HasColumnName("DestinationId");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OriginalTableId" }, "IX_tbl_CruiseBooking_Destinations_Content_DestinationId");

                    b.HasIndex(new[] { "LanguageId" }, "IX_tbl_CruiseBooking_Destinations_Content_LangId");

                    b.ToTable("tbl_CruiseBooking_Destinations_Contents");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.Dining", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CruiseId")
                        .HasColumnType("int");

                    b.Property<int?>("CruiselId")
                        .HasColumnType("int");

                    b.Property<string>("DiningCuisine")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DiningDescription")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DiningFolderName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DiningHours")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("DiningMenu")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DiningName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("DiningOpenFor")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DiningPhoto")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("DiningTypeId")
                        .HasColumnType("int");

                    b.Property<string>("DiningUrl")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DressCode")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CruiseId");

                    b.HasIndex("DiningTypeId");

                    b.ToTable("tbl_CruiseBooking_Dinings");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.DiningPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("DiningId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PhotoFile")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("PhotoHieght")
                        .HasColumnType("int");

                    b.Property<int?>("PhotoPosition")
                        .HasColumnType("int");

                    b.Property<bool?>("PhotoStatus")
                        .HasColumnType("bit");

                    b.Property<int?>("PhotoWidth")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DiningId" }, "IX_tbl_CruiseBooking_Dinings_Photos_DiningId");

                    b.ToTable("tbl_CruiseBooking_Dinings_Photos");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.DiningType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DiningTypeNameSys")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("DiningTypeUrl")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("tbl_Master_Dinings_Types");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.DiningTypeContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DiningTypeName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("OriginalTableId")
                        .HasColumnType("int")
                        .HasColumnName("DiningTypeId");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OriginalTableId" }, "IX_tbl_Master_DiningTypes_Contents_DiningTypeId");

                    b.HasIndex(new[] { "LanguageId" }, "IX_tbl_Master_DiningTypes_Contents_LanguageId");

                    b.ToTable("tbl_Master_DiningTypes_Contents");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.Duration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("Code")
                        .HasColumnType("int");

                    b.Property<int?>("Days")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("Nights")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("tbl_CruiseBooking_Durations");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.Facility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FacilityNameSys")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FacilityUrl")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("tbl_Master_Facilties");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.FacilityContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FacilityName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FacilityNote")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("OriginalTableId")
                        .HasColumnType("int")
                        .HasColumnName("FacilityId");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OriginalTableId" }, "IX_tbl_Master_Facilties_Contents_FacilityId");

                    b.HasIndex(new[] { "LanguageId" }, "IX_tbl_Master_Facilties_Contents_LanguageId");

                    b.ToTable("tbl_Master_Facilties_Contents");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.Itinerary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CityFromId")
                        .HasColumnType("int");

                    b.Property<int?>("CityToId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("CruiseId")
                        .HasColumnType("int");

                    b.Property<int?>("DurationId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ItineraryMap")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool?>("ItineraryStatus")
                        .HasColumnType("bit");

                    b.Property<int?>("ItineraryTypeId")
                        .HasColumnType("int");

                    b.Property<string>("OverviewPhoto")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("WeekDayId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityFromId");

                    b.HasIndex("CityToId");

                    b.HasIndex("DurationId");

                    b.HasIndex("ItineraryTypeId");

                    b.HasIndex("WeekDayId");

                    b.HasIndex(new[] { "CompanyId" }, "IX_tbl_CruiseBooking_Itineraries_CompanyId");

                    b.HasIndex(new[] { "CruiseId" }, "IX_tbl_CruiseBooking_Itineraries_CruiseId");

                    b.ToTable("tbl_CruiseBooking_Itineraries");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.ItineraryContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Details")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Intro")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ItineraryName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("OriginalTableId")
                        .HasColumnType("int")
                        .HasColumnName("ItineraryId");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OriginalTableId" }, "IX_tbl_Master_Itineraries_Contents_ItineraryId");

                    b.HasIndex(new[] { "LanguageId" }, "IX_tbl_Master_Itineraries_Contents_LanguageId");

                    b.ToTable("tbl_Master_Itineraries_Contents");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.ItineraryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ItineraryDays")
                        .HasColumnType("int");

                    b.Property<int?>("ItineraryNights")
                        .HasColumnType("int");

                    b.Property<string>("ItineraryTypeNameSys")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("SailFrom")
                        .HasColumnType("int");

                    b.Property<int?>("SailTo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SailFrom");

                    b.HasIndex("SailTo");

                    b.ToTable("tbl_Master_Itineraries_Types");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.ItineraryTypeContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ItineraryTypeName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("OriginalTableId")
                        .HasColumnType("int")
                        .HasColumnName("ItineraryTypeId");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OriginalTableId" }, "IX_tbl_Master_Itineraries_Types_Contents_ItineraryTypeId");

                    b.HasIndex(new[] { "LanguageId" }, "IX_tbl_Master_Itineraries_Types_Contents_LanguageId");

                    b.ToTable("tbl_Master_Itineraries_Types_Contents");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("LangStatus")
                        .HasColumnType("bit");

                    b.Property<string>("LanguageAbbreviation")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LanguageClass")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LanguageFlag")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("LanguageName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("tbl_Master_Languages");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.OperationDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CruiseId")
                        .HasColumnType("int");

                    b.Property<int?>("EmbarcationCityId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ItineraryId")
                        .HasColumnType("int");

                    b.Property<bool?>("OperationDateStatus")
                        .HasColumnType("bit");

                    b.Property<int?>("OperationDay")
                        .HasColumnType("int");

                    b.Property<int?>("OperationMonth")
                        .HasColumnType("int");

                    b.Property<int?>("OperationYear")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Operation_Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("WeekDayId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmbarcationCityId");

                    b.HasIndex(new[] { "CruiseId" }, "IX_tbl_CruiseBooking_OperationDates_CruiseId");

                    b.HasIndex(new[] { "ItineraryId" }, "IX_tbl_CruiseBooking_OperationDates_ItineraryId");

                    b.HasIndex(new[] { "WeekDayId" }, "IX_tbl_CruiseBooking_OperationDates_WeekDayId");

                    b.ToTable("tbl_CruiseBooking_OperationDates");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.Period", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CruiseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PeriodNameSys")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("PeriodTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("SeasonId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PeriodTypeId");

                    b.HasIndex(new[] { "CruiseId" }, "IX_tbl_CruiseBooking_Periods_CruiseId");

                    b.HasIndex(new[] { "SeasonId" }, "IX_tbl_CruiseBooking_Periods_SeasonId");

                    b.ToTable("tbl_CruiseBooking_Periods");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.PeriodContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("OriginalTableId")
                        .HasColumnType("int")
                        .HasColumnName("PeriodId");

                    b.Property<int?>("PeriodId")
                        .HasColumnType("int")
                        .HasColumnName("PeriodId1");

                    b.Property<string>("PeriodName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("PeriodId");

                    b.HasIndex(new[] { "LanguageId" }, "IX_tbl_CruiseBooking_Periods_Contents_LanguageId");

                    b.HasIndex(new[] { "OriginalTableId" }, "IX_tbl_CruiseBooking_Periods_Contents_PeriodId");

                    b.ToTable("tbl_CruiseBooking_Periods_Contents");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.PeriodType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CruiseId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PeriodTypeNameSys")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CruiseId" }, "IX_tbl_CruiseBooking_Periods_Types_CruiseId");

                    b.ToTable("tbl_Master_Periods_Types");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.PeriodTypeContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("OriginalTableId")
                        .HasColumnType("int")
                        .HasColumnName("PeriodTypeId");

                    b.Property<int?>("PeriodTypeId")
                        .HasColumnType("int")
                        .HasColumnName("PeriodTypeId1");

                    b.Property<string>("PeriodTypeName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("PeriodTypeId");

                    b.HasIndex(new[] { "LanguageId" }, "IX_tbl_Master_Periods_Types_Contents_LanguageId");

                    b.HasIndex(new[] { "OriginalTableId" }, "IX_tbl_Master_Periods_Types_Contents_PeriodTypeId");

                    b.ToTable("tbl_Master_Periods_Types_Contents");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.Rate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CruiseId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("RateNameSys")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("StandardRateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CruiseId" }, "IX_tbl_CruiseBooking_Rates_CruiseId");

                    b.HasIndex(new[] { "StandardRateId" }, "IX_tbl_CruiseBooking_Rates_StandardRateId");

                    b.ToTable("tbl_CruiseBooking_Rates");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.RateContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("ContentLangStatus")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("OriginalTableId")
                        .HasColumnType("int")
                        .HasColumnName("RateId");

                    b.Property<string>("RateName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LanguageId" }, "IX_tbl_CruiseBooking_Rates_Contents_LanguageId");

                    b.HasIndex(new[] { "OriginalTableId" }, "IX_tbl_CruiseBooking_Rates_Contents_RateId");

                    b.ToTable("tbl_CruiseBooking_Rates_Contents");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CruiseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("SeasonNameSys")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CruiseId" }, "IX_tbl_CruiseBooking_Seasons_CruiseId");

                    b.ToTable("tbl_CruiseBooking_Seasons");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.SeasonContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("ContentLangStatus")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("OriginalTableId")
                        .HasColumnType("int")
                        .HasColumnName("SeasonId");

                    b.Property<string>("SeasonName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LanguageId" }, "IX_tbl_CruiseBooking_Seasons_Contents_LanguageId");

                    b.HasIndex(new[] { "OriginalTableId" }, "IX_tbl_CruiseBooking_Seasons_Contents_SeasonId");

                    b.ToTable("tbl_CruiseBooking_Seasons_Contents");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.StandardRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CruiseId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("StandardRateNameSys")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CruiseId" }, "IX_tbl_CruiseBooking_StandardRates_CruiseId");

                    b.ToTable("tbl_CruiseBooking_StandardRates");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.StandardRateContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("ContentLangStatus")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("OriginalTableId")
                        .HasColumnType("int")
                        .HasColumnName("StandardRateId");

                    b.Property<string>("StandardRateName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LanguageId" }, "IX_tbl_CruiseBooking_StandardRates_Contents_LanguageId");

                    b.HasIndex(new[] { "OriginalTableId" }, "IX_tbl_CruiseBooking_StandardRates_Contents_StandardRateId");

                    b.ToTable("tbl_CruiseBooking_StandardRates_Contents");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.WeekDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("DayCode")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("WeekDayNameSys")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("tbl_Master_WeekDays");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.WeekDayContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("OriginalTableId")
                        .HasColumnType("int")
                        .HasColumnName("WeekDayId");

                    b.Property<string>("WeekDayName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("WeekDayNameShort")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LanguageId" }, "IX_tbl_Master_WeekDays_Contents_LanguageId");

                    b.HasIndex(new[] { "OriginalTableId" }, "IX_tbl_Master_WeekDays_Contents_WeekDayId");

                    b.ToTable("tbl_Master_WeekDays_Contents");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NileCapitalCruises.Core.ApiModels.CompanyUser", b =>
                {
                    b.HasOne("NileCapitalCruises.Core.Models.Company", "Company")
                        .WithMany("CompanyUsers")
                        .HasForeignKey("CompanyId");

                    b.HasOne("NileCapitalCruises.Core.ApiModels.ApplicationUser", "User")
                        .WithOne("CompanyUser")
                        .HasForeignKey("NileCapitalCruises.Core.ApiModels.CompanyUser", "UserId");

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.AmenityContent", b =>
                {
                    b.HasOne("NileCapitalCruises.Core.Models.Amenity", "Amenities")
                        .WithMany("AmenityContents")
                        .HasForeignKey("AmenitiesId");

                    b.HasOne("NileCapitalCruises.Core.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.Navigation("Amenities");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.BrandContent", b =>
                {
                    b.HasOne("NileCapitalCruises.Core.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("NileCapitalCruises.Core.Models.Brand", "Brand")
                        .WithMany("BrandContents")
                        .HasForeignKey("OriginalTableId");

                    b.Navigation("Brand");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.Cabin", b =>
                {
                    b.HasOne("NileCapitalCruises.Core.Models.CabinType", "CabinType")
                        .WithMany()
                        .HasForeignKey("CabinTypeId");

                    b.HasOne("NileCapitalCruises.Core.Models.Cruise", "Cruise")
                        .WithMany("Cabins")
                        .HasForeignKey("CruiseId");

                    b.HasOne("NileCapitalCruises.Core.Models.Deck", "Deck")
                        .WithMany("Cabins")
                        .HasForeignKey("DeckId");

                    b.Navigation("CabinType");

                    b.Navigation("Cruise");

                    b.Navigation("Deck");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.CabinAmenity", b =>
                {
                    b.HasOne("NileCapitalCruises.Core.Models.Amenity", "Amenity")
                        .WithMany("CabinAmenities")
                        .HasForeignKey("AmenityId");

                    b.HasOne("NileCapitalCruises.Core.Models.Cabin", "Cabin")
                        .WithMany("CabinAmenities")
                        .HasForeignKey("CabinId");

                    b.Navigation("Amenity");

                    b.Navigation("Cabin");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.CabinContent", b =>
                {
                    b.HasOne("NileCapitalCruises.Core.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("NileCapitalCruises.Core.Models.Cabin", "Cabin")
                        .WithMany("CabinContents")
                        .HasForeignKey("OriginalTableId");

                    b.Navigation("Cabin");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.CabinPhoto", b =>
                {
                    b.HasOne("NileCapitalCruises.Core.Models.Cabin", "Cabin")
                        .WithMany("CabinPhotos")
                        .HasForeignKey("CabinId");

                    b.Navigation("Cabin");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.CabinStatusContent", b =>
                {
                    b.HasOne("NileCapitalCruises.Core.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("NileCapitalCruises.Core.Models.CabinStatus", "CabinStatus")
                        .WithMany("CabinStatusContents")
                        .HasForeignKey("OriginalTableId");

                    b.Navigation("CabinStatus");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.CabinTypeContent", b =>
                {
                    b.HasOne("NileCapitalCruises.Core.Models.CabinType", null)
                        .WithMany("CabinTypeContents")
                        .HasForeignKey("CabinTypeId");

                    b.HasOne("NileCapitalCruises.Core.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.CabinTypeOperationDate", b =>
                {
                    b.HasOne("NileCapitalCruises.Core.Models.CabinType", "CabinType")
                        .WithMany("CabinTypeOperationDates")
                        .HasForeignKey("CabinTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NileCapitalCruises.Core.Models.OperationDate", "OperationDate")
                        .WithMany("CabinTypeOperationDates")
                        .HasForeignKey("OperationDateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CabinType");

                    b.Navigation("OperationDate");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.CabinTypePeriodTypeRate", b =>
                {
                    b.HasOne("NileCapitalCruises.Core.Models.CabinType", "CabinType")
                        .WithMany()
                        .HasForeignKey("CabinTypeId");

                    b.HasOne("NileCapitalCruises.Core.Models.PeriodType", "PeriodType")
                        .WithMany()
                        .HasForeignKey("PeriodTypeId");

                    b.HasOne("NileCapitalCruises.Core.Models.Rate", "Rate")
                        .WithMany()
                        .HasForeignKey("RateId");

                    b.Navigation("CabinType");

                    b.Navigation("PeriodType");

                    b.Navigation("Rate");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.CabinTypePeriodTypeStandardRate", b =>
                {
                    b.HasOne("NileCapitalCruises.Core.Models.CabinType", "CabinType")
                        .WithMany()
                        .HasForeignKey("CabinTypeId");

                    b.HasOne("NileCapitalCruises.Core.Models.PeriodType", "PeriodType")
                        .WithMany()
                        .HasForeignKey("PeriodTypeId");

                    b.HasOne("NileCapitalCruises.Core.Models.StandardRate", "StandardRate")
                        .WithMany()
                        .HasForeignKey("StandardRateId");

                    b.Navigation("CabinType");

                    b.Navigation("PeriodType");

                    b.Navigation("StandardRate");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.CityContent", b =>
                {
                    b.HasOne("NileCapitalCruises.Core.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("NileCapitalCruises.Core.Models.City", "City")
                        .WithMany("CityContents")
                        .HasForeignKey("OriginalTableId");

                    b.Navigation("City");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.CompanyContent", b =>
                {
                    b.HasOne("NileCapitalCruises.Core.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("NileCapitalCruises.Core.Models.Company", "Company")
                        .WithMany("CompanyContents")
                        .HasForeignKey("OriginalTableId");

                    b.Navigation("Company");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.CompanyUserCruise", b =>
                {
                    b.HasOne("NileCapitalCruises.Core.ApiModels.CompanyUser", "CompanyUser")
                        .WithMany("CompanyUserCruises")
                        .HasForeignKey("CompanyUserId");

                    b.HasOne("NileCapitalCruises.Core.Models.Cruise", "Cruise")
                        .WithMany("CompanyUserCruises")
                        .HasForeignKey("CruiseId");

                    b.Navigation("CompanyUser");

                    b.Navigation("Cruise");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.CountryContent", b =>
                {
                    b.HasOne("NileCapitalCruises.Core.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("NileCapitalCruises.Core.Models.Country", "Country")
                        .WithMany("CountryContents")
                        .HasForeignKey("OriginalTableId");

                    b.Navigation("Country");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.Cruise", b =>
                {
                    b.HasOne("NileCapitalCruises.Core.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId");

                    b.HasOne("NileCapitalCruises.Core.Models.Company", "Company")
                        .WithMany("Cruises")
                        .HasForeignKey("CompanyId");

                    b.HasOne("NileCapitalCruises.Core.Models.CruiseCategory", "CruiseCategory")
                        .WithMany("Cruises")
                        .HasForeignKey("CruiseCategoryId");

                    b.Navigation("Brand");

                    b.Navigation("Company");

                    b.Navigation("CruiseCategory");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.CruiseCategoryContent", b =>
                {
                    b.HasOne("NileCapitalCruises.Core.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("NileCapitalCruises.Core.Models.CruiseCategory", "CruiseCategory")
                        .WithMany("CruiseCategoryContents")
                        .HasForeignKey("OriginalTableId");

                    b.Navigation("CruiseCategory");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.CruiseContent", b =>
                {
                    b.HasOne("NileCapitalCruises.Core.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("NileCapitalCruises.Core.Models.Cruise", "Cruise")
                        .WithMany("CruiseContents")
                        .HasForeignKey("OriginalTableId");

                    b.Navigation("Cruise");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.CruiseFacility", b =>
                {
                    b.HasOne("NileCapitalCruises.Core.Models.Cruise", "Cruise")
                        .WithMany("CruiseFacilities")
                        .HasForeignKey("CruiseId");

                    b.HasOne("NileCapitalCruises.Core.Models.Facility", "Facility")
                        .WithMany("CruiseFacilities")
                        .HasForeignKey("FacilityId");

                    b.Navigation("Cruise");

                    b.Navigation("Facility");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.CruisePhoto", b =>
                {
                    b.HasOne("NileCapitalCruises.Core.Models.Cruise", "Cruise")
                        .WithMany("CruisePhotos")
                        .HasForeignKey("CruiseId");

                    b.Navigation("Cruise");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.Deck", b =>
                {
                    b.HasOne("NileCapitalCruises.Core.Models.Cruise", "Cruise")
                        .WithMany("CruiseDecks")
                        .HasForeignKey("CruiseId");

                    b.Navigation("Cruise");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.DeckContent", b =>
                {
                    b.HasOne("NileCapitalCruises.Core.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.Destination", b =>
                {
                    b.HasOne("NileCapitalCruises.Core.Models.Country", "Country")
                        .WithMany("Destinations")
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.DestinationContent", b =>
                {
                    b.HasOne("NileCapitalCruises.Core.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("NileCapitalCruises.Core.Models.Destination", "Destination")
                        .WithMany("DestinationContents")
                        .HasForeignKey("OriginalTableId");

                    b.Navigation("Destination");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.Dining", b =>
                {
                    b.HasOne("NileCapitalCruises.Core.Models.Cruise", "Cruise")
                        .WithMany("Dinings")
                        .HasForeignKey("CruiseId");

                    b.HasOne("NileCapitalCruises.Core.Models.DiningType", "DiningType")
                        .WithMany()
                        .HasForeignKey("DiningTypeId");

                    b.Navigation("Cruise");

                    b.Navigation("DiningType");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.DiningPhoto", b =>
                {
                    b.HasOne("NileCapitalCruises.Core.Models.Dining", "Dining")
                        .WithMany("DiningPhotos")
                        .HasForeignKey("DiningId");

                    b.Navigation("Dining");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.DiningTypeContent", b =>
                {
                    b.HasOne("NileCapitalCruises.Core.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("NileCapitalCruises.Core.Models.DiningType", "DiningType")
                        .WithMany("DiningTypeContents")
                        .HasForeignKey("OriginalTableId");

                    b.Navigation("DiningType");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.FacilityContent", b =>
                {
                    b.HasOne("NileCapitalCruises.Core.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("NileCapitalCruises.Core.Models.Facility", "Facility")
                        .WithMany("FacilityContents")
                        .HasForeignKey("OriginalTableId");

                    b.Navigation("Facility");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.Itinerary", b =>
                {
                    b.HasOne("NileCapitalCruises.Core.Models.City", "CityFrom")
                        .WithMany()
                        .HasForeignKey("CityFromId");

                    b.HasOne("NileCapitalCruises.Core.Models.City", "CityTo")
                        .WithMany()
                        .HasForeignKey("CityToId");

                    b.HasOne("NileCapitalCruises.Core.Models.Company", "Company")
                        .WithMany("Itineraries")
                        .HasForeignKey("CompanyId");

                    b.HasOne("NileCapitalCruises.Core.Models.Cruise", "Cruise")
                        .WithMany()
                        .HasForeignKey("CruiseId");

                    b.HasOne("NileCapitalCruises.Core.Models.Duration", "Duration")
                        .WithMany("Itineraries")
                        .HasForeignKey("DurationId");

                    b.HasOne("NileCapitalCruises.Core.Models.ItineraryType", "ItineraryType")
                        .WithMany()
                        .HasForeignKey("ItineraryTypeId");

                    b.HasOne("NileCapitalCruises.Core.Models.WeekDay", "WeekDay")
                        .WithMany()
                        .HasForeignKey("WeekDayId");

                    b.Navigation("CityFrom");

                    b.Navigation("CityTo");

                    b.Navigation("Company");

                    b.Navigation("Cruise");

                    b.Navigation("Duration");

                    b.Navigation("ItineraryType");

                    b.Navigation("WeekDay");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.ItineraryContent", b =>
                {
                    b.HasOne("NileCapitalCruises.Core.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("NileCapitalCruises.Core.Models.Itinerary", "Itinerary")
                        .WithMany("ItineraryContents")
                        .HasForeignKey("OriginalTableId");

                    b.Navigation("Itinerary");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.ItineraryType", b =>
                {
                    b.HasOne("NileCapitalCruises.Core.Models.City", "CityFrom")
                        .WithMany()
                        .HasForeignKey("SailFrom");

                    b.HasOne("NileCapitalCruises.Core.Models.City", "CityTo")
                        .WithMany()
                        .HasForeignKey("SailTo");

                    b.Navigation("CityFrom");

                    b.Navigation("CityTo");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.ItineraryTypeContent", b =>
                {
                    b.HasOne("NileCapitalCruises.Core.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("NileCapitalCruises.Core.Models.ItineraryType", "ItineraryType")
                        .WithMany("ItineraryTypeContents")
                        .HasForeignKey("OriginalTableId");

                    b.Navigation("ItineraryType");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.OperationDate", b =>
                {
                    b.HasOne("NileCapitalCruises.Core.Models.Cruise", "Cruise")
                        .WithMany("OperationDates")
                        .HasForeignKey("CruiseId");

                    b.HasOne("NileCapitalCruises.Core.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("EmbarcationCityId");

                    b.HasOne("NileCapitalCruises.Core.Models.Itinerary", "Itinerary")
                        .WithMany("OperationDates")
                        .HasForeignKey("ItineraryId");

                    b.HasOne("NileCapitalCruises.Core.Models.WeekDay", "WeekDay")
                        .WithMany()
                        .HasForeignKey("WeekDayId");

                    b.Navigation("City");

                    b.Navigation("Cruise");

                    b.Navigation("Itinerary");

                    b.Navigation("WeekDay");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.Period", b =>
                {
                    b.HasOne("NileCapitalCruises.Core.Models.Cruise", "Cruise")
                        .WithMany("Periods")
                        .HasForeignKey("CruiseId");

                    b.HasOne("NileCapitalCruises.Core.Models.PeriodType", "PeriodType")
                        .WithMany()
                        .HasForeignKey("PeriodTypeId");

                    b.HasOne("NileCapitalCruises.Core.Models.Season", "Season")
                        .WithMany("Periods")
                        .HasForeignKey("SeasonId");

                    b.Navigation("Cruise");

                    b.Navigation("PeriodType");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.PeriodContent", b =>
                {
                    b.HasOne("NileCapitalCruises.Core.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("NileCapitalCruises.Core.Models.Period", null)
                        .WithMany("PeriodContents")
                        .HasForeignKey("PeriodId");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.PeriodType", b =>
                {
                    b.HasOne("NileCapitalCruises.Core.Models.Cruise", "Cruise")
                        .WithMany("PeriodTypes")
                        .HasForeignKey("CruiseId");

                    b.Navigation("Cruise");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.PeriodTypeContent", b =>
                {
                    b.HasOne("NileCapitalCruises.Core.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("NileCapitalCruises.Core.Models.PeriodType", null)
                        .WithMany("PeriodTypeContents")
                        .HasForeignKey("PeriodTypeId");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.Rate", b =>
                {
                    b.HasOne("NileCapitalCruises.Core.Models.Cruise", "Cruise")
                        .WithMany()
                        .HasForeignKey("CruiseId");

                    b.HasOne("NileCapitalCruises.Core.Models.StandardRate", "StandardRate")
                        .WithMany("Rates")
                        .HasForeignKey("StandardRateId");

                    b.Navigation("Cruise");

                    b.Navigation("StandardRate");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.RateContent", b =>
                {
                    b.HasOne("NileCapitalCruises.Core.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("NileCapitalCruises.Core.Models.Rate", "Rate")
                        .WithMany("RateContents")
                        .HasForeignKey("OriginalTableId");

                    b.Navigation("Language");

                    b.Navigation("Rate");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.Season", b =>
                {
                    b.HasOne("NileCapitalCruises.Core.Models.Cruise", "Cruise")
                        .WithMany("Seasons")
                        .HasForeignKey("CruiseId");

                    b.Navigation("Cruise");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.SeasonContent", b =>
                {
                    b.HasOne("NileCapitalCruises.Core.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("NileCapitalCruises.Core.Models.Season", "Season")
                        .WithMany("SeasonContents")
                        .HasForeignKey("OriginalTableId");

                    b.Navigation("Language");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.StandardRate", b =>
                {
                    b.HasOne("NileCapitalCruises.Core.Models.Cruise", "Cruise")
                        .WithMany("StandardRates")
                        .HasForeignKey("CruiseId");

                    b.Navigation("Cruise");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.StandardRateContent", b =>
                {
                    b.HasOne("NileCapitalCruises.Core.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("NileCapitalCruises.Core.Models.StandardRate", "StandardRate")
                        .WithMany("StandardRateContents")
                        .HasForeignKey("OriginalTableId");

                    b.Navigation("Language");

                    b.Navigation("StandardRate");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.WeekDayContent", b =>
                {
                    b.HasOne("NileCapitalCruises.Core.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("NileCapitalCruises.Core.Models.WeekDay", "WeekDay")
                        .WithMany()
                        .HasForeignKey("OriginalTableId");

                    b.Navigation("Language");

                    b.Navigation("WeekDay");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("NileCapitalCruises.Core.ApiModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("NileCapitalCruises.Core.ApiModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NileCapitalCruises.Core.ApiModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("NileCapitalCruises.Core.ApiModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NileCapitalCruises.Core.ApiModels.ApplicationUser", b =>
                {
                    b.Navigation("CompanyUser");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.ApiModels.CompanyUser", b =>
                {
                    b.Navigation("CompanyUserCruises");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.Amenity", b =>
                {
                    b.Navigation("AmenityContents");

                    b.Navigation("CabinAmenities");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.Brand", b =>
                {
                    b.Navigation("BrandContents");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.Cabin", b =>
                {
                    b.Navigation("CabinAmenities");

                    b.Navigation("CabinContents");

                    b.Navigation("CabinPhotos");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.CabinStatus", b =>
                {
                    b.Navigation("CabinStatusContents");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.CabinType", b =>
                {
                    b.Navigation("CabinTypeContents");

                    b.Navigation("CabinTypeOperationDates");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.City", b =>
                {
                    b.Navigation("CityContents");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.Company", b =>
                {
                    b.Navigation("CompanyContents");

                    b.Navigation("CompanyUsers");

                    b.Navigation("Cruises");

                    b.Navigation("Itineraries");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.Country", b =>
                {
                    b.Navigation("CountryContents");

                    b.Navigation("Destinations");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.Cruise", b =>
                {
                    b.Navigation("Cabins");

                    b.Navigation("CompanyUserCruises");

                    b.Navigation("CruiseContents");

                    b.Navigation("CruiseDecks");

                    b.Navigation("CruiseFacilities");

                    b.Navigation("CruisePhotos");

                    b.Navigation("Dinings");

                    b.Navigation("OperationDates");

                    b.Navigation("PeriodTypes");

                    b.Navigation("Periods");

                    b.Navigation("Seasons");

                    b.Navigation("StandardRates");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.CruiseCategory", b =>
                {
                    b.Navigation("CruiseCategoryContents");

                    b.Navigation("Cruises");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.Deck", b =>
                {
                    b.Navigation("Cabins");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.Destination", b =>
                {
                    b.Navigation("DestinationContents");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.Dining", b =>
                {
                    b.Navigation("DiningPhotos");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.DiningType", b =>
                {
                    b.Navigation("DiningTypeContents");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.Duration", b =>
                {
                    b.Navigation("Itineraries");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.Facility", b =>
                {
                    b.Navigation("CruiseFacilities");

                    b.Navigation("FacilityContents");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.Itinerary", b =>
                {
                    b.Navigation("ItineraryContents");

                    b.Navigation("OperationDates");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.ItineraryType", b =>
                {
                    b.Navigation("ItineraryTypeContents");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.OperationDate", b =>
                {
                    b.Navigation("CabinTypeOperationDates");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.Period", b =>
                {
                    b.Navigation("PeriodContents");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.PeriodType", b =>
                {
                    b.Navigation("PeriodTypeContents");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.Rate", b =>
                {
                    b.Navigation("RateContents");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.Season", b =>
                {
                    b.Navigation("Periods");

                    b.Navigation("SeasonContents");
                });

            modelBuilder.Entity("NileCapitalCruises.Core.Models.StandardRate", b =>
                {
                    b.Navigation("Rates");

                    b.Navigation("StandardRateContents");
                });
#pragma warning restore 612, 618
        }
    }
}
